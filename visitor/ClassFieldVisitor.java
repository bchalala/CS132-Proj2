//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import utility.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ClassFieldVisitor extends GJVoidDepthFirst<Pair<String,String>> {

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n, Pair<String,String> argu) {
      Pair<String,String> arg = new Pair<String,String>(n.f1.f0.toString(), "");
      n.f3.accept(this, arg);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n, Pair<String,String> argu) {
      Pair<String,String> arg = new Pair<String,String>(n.f1.f0.toString(), "");
      n.f5.accept(this, arg);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n, Pair<String,String> argu) {
      Pair<String,String> arg = new Pair<String,String>(argu.x, n.f1.f0.toString());
      n.f0.accept(this, arg);
   }

    /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
  public void visit(ArrayType n, Pair<String,String> argu) {
      // Check if it is a field or not
      if (argu.x.equals("") || argu.y.equals(""))
        return;

      ExpType e = new ExpType(ExpType.Type.INTARR);
      ClassTypes.addFieldName(argu.x, argu.y, e);
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n, Pair<String,String> argu) {
      if (argu.x.equals("") || argu.y.equals(""))
        return;
      ExpType e = new ExpType(ExpType.Type.BOOLEAN);
      ClassTypes.addFieldName(argu.x, argu.y, e);
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n, Pair<String,String> argu) {
      if (argu.x.equals("") || argu.y.equals(""))
        return;
      ExpType e = new ExpType(ExpType.Type.INT);
      ClassTypes.addFieldName(argu.x, argu.y, e);
   }

    /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, Pair<String, String> argu) {
      if (argu.x.equals("") || argu.y.equals(""))
        return;

      ExpType e = new ExpType(ExpType.Type.ID, n.f0.toString());
      ClassTypes.addFieldName(argu.x, argu.y, e);
   }
}
