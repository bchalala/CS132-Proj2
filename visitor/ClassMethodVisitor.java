//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import utility.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

// Returns the type given a class and method. 
public class ClassMethodVisitor extends GJDepthFirst<ExpType,Pair<String, String>> {

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public ExpType visit(ClassDeclaration n, Pair<String, String> argu) {
      Pair<String, String> arg = new Pair<String, String>(n.f1.f0.toString(), "");
      n.f4.accept(this, arg);
      return null;

   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public ExpType visit(ClassExtendsDeclaration n, Pair<String, String> argu) {

      Pair<String, String> arg = new Pair<String, String>(n.f1.f0.toString(), "");
      n.f6.accept(this, arg);
      return null;
   }


   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public ExpType visit(MethodDeclaration n, Pair<String, String> argu) {
      Pair<String, String> arg = new Pair<String, String>(argu.x, n.f2.f0.toString());
      ExpType t = n.f1.accept(this, arg);
      ClassTypes.addMethodName(argu.x, n.f2.f0.toString(), t);
      n.f4.accept(this, arg);
      return null;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public ExpType visit(FormalParameterList n, Pair<String, String> argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public ExpType visit(FormalParameter n, Pair<String, String> argu) {
      // If we are currently looking at a method parameter, these should be empty string.
      if (argu.x == "" || argu.y == "")
        return null;

      // Get the type and id, then add the method to the class.
      ExpType t = n.f0.accept(this, argu);
      String id = n.f1.f0.toString();
      ClassTypes.addMethodName(argu.x, argu.y, id, t);
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public ExpType visit(FormalParameterRest n, Pair<String, String> argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return null;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public ExpType visit(Type n, Pair<String, String> argu) {
      if (argu.x == "" || argu.y == "")
        return null;

      ExpType t = n.f0.accept(this, argu);
      return t;
   }

    /**
    * f0 -> <IDENTIFIER>
    */
   public ExpType visit(Identifier n, Pair<String, String> argu) {
      if (argu.x == "" || argu.y == "")
        return null;

      ExpType t = new ExpType(ExpType.Type.ID, n.f0.toString());
      return t;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public ExpType visit(ArrayType n, Pair<String, String> argu) {
      if (argu.x == "" || argu.y == "")
        return null;

      ExpType t = new ExpType(ExpType.Type.INTARR);
      return t;
   }

   /**
    * f0 -> "boolean"
    */
   public ExpType visit(BooleanType n, Pair<String, String> argu) {
      if (argu.x == "" || argu.y == "")
        return null;

      ExpType t = new ExpType(ExpType.Type.BOOLEAN);
      return t;
   }

   /**
    * f0 -> "int"
    */
   public ExpType visit(IntegerType n, Pair<String, String> argu) {
      if (argu.x == "" || argu.y == "")
        return null;

      ExpType t = new ExpType(ExpType.Type.INT);
      return t;
   }
}
