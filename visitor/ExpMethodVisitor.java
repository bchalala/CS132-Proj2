//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import utility.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ExpMethodVisitor extends GJDepthFirst<Vector<ExpType>, Pair<String, Vector<Pair<String, ExpType>>>> {

   public Vector<ExpType> visit(NodeListOptional n, Pair<String, Vector<Pair<String, ExpType>>> argu) {
    Vector<ExpType> typeVec = new Vector<ExpType>();
    ExpressionVisitor ev = new ExpressionVisitor();
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            // Call a normal expression visitor on node then add it to the vector.
            ExpType t = e.nextElement().accept(ev,argu);
            typeVec.add(t);
            _count++;
         }
      }
         
      return typeVec;
   }

   public Vector<ExpType> visit(NodeOptional n, Pair<String, Vector<Pair<String, ExpType>>> argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return new Vector<ExpType>();
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public Vector<ExpType> visit(ExpressionList n, Pair<String, Vector<Pair<String, ExpType>>> argu) {
      ExpressionVisitor ev = new ExpressionVisitor();
      Vector<ExpType> expVec = n.f1.accept(this, argu);
      ExpType t = n.f0.accept(ev, argu);

      // Insert element at the front of the array
      expVec.insertElementAt(t, 0);
      
      return expVec;
   }
 }



  
